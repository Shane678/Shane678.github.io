<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ES6 对象之 Map</title>
      <link href="/archives/daff8b99.html"/>
      <url>/archives/daff8b99.html</url>
      
        <content type="html"><![CDATA[<h1 id="ES6-对象之-Map"><a href="#ES6-对象之-Map" class="headerlink" title="ES6 对象之 Map"></a>ES6 对象之 Map</h1><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 实例化 Map 对象</span><span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Map(0) {}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 实例化 Map 对象，同时进行初始化赋值，赋值内容要求是可遍历的对象，并且该对象内的元素还得是形式为 [key，value] 的数组</span><span class="token comment" spellcheck="true">// 错误写法：</span><span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Uncaught TypeError: Iterator value 1 is not an entry object</span><span class="token comment" spellcheck="true">// 正确写法：</span><span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Map(2) {1 => 2, 3 => 4}</span><span class="token comment" spellcheck="true">// 表面上看 Map 的数据结构跟 Object 的 key-value 形式没有太大区别，</span><span class="token comment" spellcheck="true">// 但事实上，Map 中的 key 可以是任意类型的值（注意和 Set 的区别，Set 是里面的每个元素可以为任意值）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 设置 Map 对象中键的值</span>map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 上面的两行代码效果等同于 let map = new Map([[1, 2], [3, 4]])</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Map(2) {1 => 2, 3 => 4}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 设置 Map 对象中键的值</span>map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 设置 Map 对象中键的值，这里重新设置了键为“1”的值，相当于实现了修改的功能</span>map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Map(2) {1 => 3, 3 => 4}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 根据“key”删除对应的键值对</span>map<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Map(1) {3 => 4}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 清空全部数据</span>map<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Map(0) {}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 通过 size 属性获取 Map 中的数据数量</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 通过 has() 方法，根据“key”值查找数据是否存在</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 通过 get() 方法，根据“key”值获取对应的“value”值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 3</span><span class="token comment" spellcheck="true">// 通过 keys() 方法，获取所有 key</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// MapIterator {1, 3}</span><span class="token comment" spellcheck="true">// 通过 values() 方法，获取所有 value</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// MapIterator {3, 4}</span><span class="token comment" spellcheck="true">// 通过 entries() 方法，获取所有键值对</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// MapIterator {1 => 3, 3 => 4}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript">map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'value-1'</span><span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'value-3'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 使用 forEach() 方法遍历 Map 对象（注意：第一个参数是“键值对”中的“值”，第二个参数是“键值对”中的“键”）</span>map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 运行结果：value-1 1value-3 3*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript">map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'value-1'</span><span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'value-3'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 使用 for of 遍历 Map 对象</span><span class="token comment" spellcheck="true">// 注意 1：Map 对象中的元素是形式为 [key，value] 的数组哦</span><span class="token comment" spellcheck="true">// 注意 2：for of 的 of 后面跟的必须是可遍历的对象哦</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 运行结果：1 "value-1"3 "value-3"*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 注意：关于“键”的类型，Map 对象中“键”的类型是任意的</span><span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Map(3) {1 => "value-1", 3 => "value-3", ƒ => 4}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 注意：关于“键”的顺序，遍历的结果会按照“键”的原始插入顺序排序</span>map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'value-10'</span><span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'value-1'</span><span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'value-3'</span><span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'value-777'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> val<span class="token punctuation">]</span> <span class="token keyword">of</span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">}</span>map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 运行结果：Map(3) {10 => "value-10", 1 => "value-777", 3 => "value-3"}[[Entries]]0: {10 => "value-10"}1: {1 => "value-777"}2: {3 => "value-3"}size: (...)__proto__: Map10 "value-10"1 "value-777"3 "value-3"value-10 10value-777 1value-3 3*/</span><span class="token comment" spellcheck="true">// 此外，Map 类型的性能较好，以后在存储数据时，可以考虑使用字典型的数据结构 Map 数据类型替代 Object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
            <tag> Map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 对象之 Set</title>
      <link href="/archives/af4604fe.html"/>
      <url>/archives/af4604fe.html</url>
      
        <content type="html"><![CDATA[<h1 id="ES6-对象之-Set"><a href="#ES6-对象之-Set" class="headerlink" title="ES6 对象之 Set"></a>ES6 对象之 Set</h1><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 声明一个 Set 对象</span><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Set(0) {}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 声明一个 Set 对象，同时进行初始化（注意：初始化的数据不一定是数组，只要是可遍历的对象即可）</span><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Set(3) {1, 2, 3}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 通过 add 方法往 Set 对象中添加数据</span>s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'goodbye'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Set(2) {"hello", "goodbye"}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 也可以级联操作</span>s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'goodbye'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Set(2) {"hello", "goodbye"}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Set 中存入重复的数据时，会自动过滤掉</span>s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'goodbye'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Set(2) {"hello", "goodbye"}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'goodbye'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 删除指定数据</span>s<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Set(1) {"goodbye"}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'goodbye'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 清空全部数据</span>s<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Set(0) {}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'goodbye'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 通过 has 方法，判断 Set 对象中是否有该数据</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">'hello2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'goodbye'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 通过 size 属性获取 Set 对象存储的数据条数</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'goodbye'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 通过 keys() 方法获取 Set 的所有“键”</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// SetIterator {"hello", "goodbye"}</span><span class="token comment" spellcheck="true">// 通过 values() 方法获取 Set 的所有“值”</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// SetIterator {"hello", "goodbye"}</span><span class="token comment" spellcheck="true">// 通过 keys() 和 values() 两个方法，我们可以知道 Set 也有 key-value，本质上也是 Object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'goodbye'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// entries() 方法返回 Set 的所有键值对</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// SetIterator {"hello" => "hello", "goodbye" => "goodbye"}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'goodbye'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 当然，我们还可以用 forEach 读取 Set 的数据</span>s<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 运行结果：hellogoodbye*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'goodbye'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 使用 for of 也能读取 Set 的数据（之前讲过，所有 Iterator 都可以用 for of 来读取）</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> iterator <span class="token keyword">of</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 运行结果：hellogoodbye*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面讲了 Set 对象的“增删查”，而关于“改”，也就是对 Set 对象数据的修改，并没有可以拿来即用的修改数据的方法，如果要改的话，要先删除再添加。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
            <tag> Set </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 对象的拷贝</title>
      <link href="/archives/7cc0e1f8.html"/>
      <url>/archives/7cc0e1f8.html</url>
      
        <content type="html"><![CDATA[<h1 id="ES6-对象的拷贝"><a href="#ES6-对象的拷贝" class="headerlink" title="ES6 对象的拷贝"></a>ES6 对象的拷贝</h1><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ES5 中的做法是把对象遍历一下，把数据逐项拷贝到目标对象中去</span><span class="token comment" spellcheck="true">// ES6 中则提供了一个新的 API，实现对象数据的拷贝</span><span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 目标对象（就是我要把数据拷贝到这个对象上来）</span><span class="token keyword">const</span> source <span class="token operator">=</span> <span class="token punctuation">{</span> b<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> c<span class="token punctuation">:</span> <span class="token number">5</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 源对象（就是要把数据拷贝出来的地方）</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> source<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 拷贝 source 对象的数据到 target 对象上来</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {b: 4, c: 5}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {b: 4, c: 5}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 但是，这个 API 是有“缺陷”的，比如目标对象和源对象的数据结构如下时，拷贝的结果就会丢失掉“h: 10”</span><span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token punctuation">{</span>    b<span class="token punctuation">:</span> <span class="token punctuation">{</span>      c<span class="token punctuation">:</span> <span class="token punctuation">{</span>        d<span class="token punctuation">:</span> <span class="token number">9</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    e<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>    f<span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span>    h<span class="token punctuation">:</span> <span class="token number">10</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  i<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token keyword">const</span> source <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token punctuation">{</span>    b<span class="token punctuation">:</span> <span class="token punctuation">{</span>      c<span class="token punctuation">:</span> <span class="token punctuation">{</span>        d<span class="token punctuation">:</span> <span class="token number">1</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    e<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    f<span class="token punctuation">:</span> <span class="token number">3</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> source<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 运行结果：{  a: {    b: {      c: {        d: 1      }    },    e: 2,    f: 3  },  i: 3}*/</span><span class="token comment" spellcheck="true">/*这样的结果是不合理的，拷贝可以修改原来的数据，但不应该删除原有的东西（原来的“h: 10”没有了）实际上，Object.assign() 实现的是浅复制（对于不是引用类型的值，会进行数据的替换，对于引用类型的值，则不再遍历，只是将引用的对象的地址进行了替换），而不是深复制，所以才会出现上面的问题（a 是个对象，属于引用类型的值，所以在拷贝时拷贝的是地址值，也就是把源对象中 a 的地址值替换掉了目标对象中 a 的地址值，a 里面的数据也就完全被替换掉了）所以呢，使用 Object.assign(target, source) 时，source 到 target 的拷贝过程中，可能会出现数据丢失的情况，就是它不能实现深拷贝，只能实现浅拷贝。如果在使用 Object.assign() 时想要实现深拷贝，则还需要进行递归*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 练习 1：如果目标对象传入的是 undefined 和 null 将会怎么样呢？</span><span class="token keyword">const</span> tar1 <span class="token operator">=</span> undefined<span class="token keyword">const</span> tar2 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token keyword">const</span> sou <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  b<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>  c<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>tar1<span class="token punctuation">,</span> sou<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Uncaught TypeError: Cannot convert undefined or null to object</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>tar2<span class="token punctuation">,</span> sou<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Uncaught TypeError: Cannot convert undefined or null to object</span><span class="token comment" spellcheck="true">// 结论：目标对象传入的是 undefined 或 null 时，会报错，“不能将 undefined 或 null 转换为对象”。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 练习 2：如果源对象传入的是 undefined 和 null 将会怎么样呢？</span><span class="token keyword">let</span> tar <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token punctuation">{</span>    b<span class="token punctuation">:</span> <span class="token punctuation">{</span>      c<span class="token punctuation">:</span> <span class="token punctuation">{</span>        d<span class="token punctuation">:</span> <span class="token number">9</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    e<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>    f<span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span>    h<span class="token punctuation">:</span> <span class="token number">10</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  i<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token keyword">const</span> sou1 <span class="token operator">=</span> undefined<span class="token keyword">const</span> sou2 <span class="token operator">=</span> <span class="token keyword">null</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>tar<span class="token punctuation">,</span> sou1<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tar<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 运行结果：{  a: {    b: {      c: {        d: 9      }    },    e: 5,    f: 6,    h: 10  },  i: 3}*/</span>tar <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token punctuation">{</span>    b<span class="token punctuation">:</span> <span class="token punctuation">{</span>      c<span class="token punctuation">:</span> <span class="token punctuation">{</span>        d<span class="token punctuation">:</span> <span class="token number">9</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    e<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>    f<span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span>    h<span class="token punctuation">:</span> <span class="token number">10</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  i<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>tar<span class="token punctuation">,</span> sou2<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tar<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 运行结果：{  a: {    b: {      c: {        d: 9      }    },    e: 5,    f: 6,    h: 10  },  i: 3}*/</span><span class="token comment" spellcheck="true">// 结论：源对象传入的是 undefined 或 null 时，拷贝后目标对象还是其原来的值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 练习 3：如果目标对象是个嵌套的对象，子对象的属性会被覆盖吗？</span><span class="token keyword">let</span> tg <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token punctuation">{</span>    b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    d<span class="token punctuation">:</span> <span class="token number">4</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> sr1 <span class="token operator">=</span> <span class="token punctuation">{</span>  e<span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>tg<span class="token punctuation">,</span> sr1<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tg<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 运行结果：{  a: {    b: 2,    d: 4  },  e: 7}*/</span>tg <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token punctuation">{</span>    b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    d<span class="token punctuation">:</span> <span class="token number">4</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> sr2 <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token punctuation">{</span>    b<span class="token punctuation">:</span> <span class="token number">2</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>tg<span class="token punctuation">,</span> sr2<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tg<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 运行结果：{  a: {    b: 2  }}*/</span><span class="token comment" spellcheck="true">// 结论：目标对象是个嵌套的对象时，</span><span class="token comment" spellcheck="true">// 如果源对象中没有目标对象的子对象名时，源对象的数据会拷贝到子对象的后面，子对象的属性不会被覆盖；</span><span class="token comment" spellcheck="true">// 如果源对象中存在目标对象的子对象名时，子对象的属性会被覆盖。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 练习 4：如果目标对象中存在嵌套的对象，子对象的属性会被覆盖吗？</span><span class="token keyword">let</span> tg <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token punctuation">{</span>    b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    d<span class="token punctuation">:</span> <span class="token number">4</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  c<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 目标对象中嵌套了子对象 a</span><span class="token keyword">const</span> sr1 <span class="token operator">=</span> <span class="token punctuation">{</span>  e<span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>tg<span class="token punctuation">,</span> sr1<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tg<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 运行结果：{  a: {    b: 2,    d: 4  },  c: 3,  e: 7}*/</span>tg <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token punctuation">{</span>    b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    d<span class="token punctuation">:</span> <span class="token number">4</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  c<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 目标对象中嵌套了子对象 a</span><span class="token keyword">const</span> sr2 <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token punctuation">{</span>    b<span class="token punctuation">:</span> <span class="token number">5</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  c<span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span>  e<span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>tg<span class="token punctuation">,</span> sr2<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tg<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 运行结果：{  a: {    b: 5  },  c: 6,  e: 7}*/</span><span class="token comment" spellcheck="true">// 结论：目标对象中存在嵌套的对象时，</span><span class="token comment" spellcheck="true">// 如果源对象中没有目标对象的子对象名时，源对象的数据会添加到目标对象中，子对象的属性不会被覆盖；</span><span class="token comment" spellcheck="true">// 如果源对象中存在目标对象的子对象名时，子对象的属性会被覆盖。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
            <tag> Object </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 对象的增强属性</title>
      <link href="/archives/8f4924d2.html"/>
      <url>/archives/8f4924d2.html</url>
      
        <content type="html"><![CDATA[<h1 id="ES6-对象的增强属性"><a href="#ES6-对象的增强属性" class="headerlink" title="ES6 对象的增强属性"></a>ES6 对象的增强属性</h1><h2 id="1-key-value-的简写"><a href="#1-key-value-的简写" class="headerlink" title="1 key-value 的简写"></a>1 key-value 的简写</h2><h3 id="1-1-ES5-中对象-key-value-形式的写法"><a href="#1-1-ES5-中对象-key-value-形式的写法" class="headerlink" title="1.1 ES5 中对象 key-value 形式的写法"></a>1.1 ES5 中对象 key-value 形式的写法</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  x<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  y<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {x: 1, y: 2}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 当 value 值是变量时，key-value 形式的写法</span><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  x<span class="token punctuation">:</span> x<span class="token punctuation">,</span>  y<span class="token punctuation">:</span> y<span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 冒号前的 x, y 是对象的 key，冒号后的 x, y 是外面定义的变量，对应的是对象的 value</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {x: 1, y: 2}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-ES6-中-key-value-的简写"><a href="#1-2-ES6-中-key-value-的简写" class="headerlink" title="1.2 ES6 中 key-value 的简写"></a>1.2 ES6 中 key-value 的简写</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* ES6 中当对象 value 值是变量，且变量名和 key 相同时，可简写 */</span><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  x<span class="token punctuation">,</span>  y<span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 看上去对象中只写了属性，实际上这里的 x 就是 x: x 的简写形式，y 同理</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {x: 1, y: 2}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-属性名支持变量和表达式"><a href="#2-属性名支持变量和表达式" class="headerlink" title="2 属性名支持变量和表达式"></a>2 属性名支持变量和表达式</h2><h3 id="2-1-ES5-中对象添加动态属性的方式"><a href="#2-1-ES5-中对象添加动态属性的方式" class="headerlink" title="2.1 ES5 中对象添加动态属性的方式"></a>2.1 ES5 中对象添加动态属性的方式</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">let</span> z <span class="token operator">=</span> <span class="token number">3</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">'x'</span><span class="token punctuation">:</span> x<span class="token punctuation">,</span>  y<span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 这里的属性名 x, y，其实都是字符串</span>obj<span class="token punctuation">[</span>z<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span> <span class="token comment" spellcheck="true">// 对象 obj 添加动态属性 z，属性值为 5</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {3: 5, x: 1, y: 2}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-ES6-中对象添加动态属性的方式"><a href="#2-2-ES6-中对象添加动态属性的方式" class="headerlink" title="2.2 ES6 中对象添加动态属性的方式"></a>2.2 ES6 中对象添加动态属性的方式</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">let</span> z <span class="token operator">=</span> <span class="token number">3</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">'x'</span><span class="token punctuation">:</span> x<span class="token punctuation">,</span>  y<span class="token punctuation">,</span>  <span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span>x <span class="token operator">+</span> z<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 这里的属性名 x, y，其实都是字符串；</span><span class="token comment" spellcheck="true">// 用中括号（[]）将变量或表达式括起来，使该变量的值或该表达式的值成为对象的属性名</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {3: 5, 4: 7, x: 1, y: 2}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-对象属性值为函数时，可简写"><a href="#3-对象属性值为函数时，可简写" class="headerlink" title="3 对象属性值为函数时，可简写"></a>3 对象属性值为函数时，可简写</h2><h3 id="3-1-ES5-中对象属性值为（常规）函数时的写法"><a href="#3-1-ES5-中对象属性值为（常规）函数时的写法" class="headerlink" title="3.1 ES5 中对象属性值为（常规）函数时的写法"></a>3.1 ES5 中对象属性值为（常规）函数时的写法</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">let</span> z <span class="token operator">=</span> <span class="token number">3</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">'x'</span><span class="token punctuation">:</span> x<span class="token punctuation">,</span>  y<span class="token punctuation">,</span>  <span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span>x <span class="token operator">+</span> z<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span>  hello<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>obj<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// hello</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-ES6-中对象属性值为（常规）函数时的简略写法"><a href="#3-2-ES6-中对象属性值为（常规）函数时的简略写法" class="headerlink" title="3.2 ES6 中对象属性值为（常规）函数时的简略写法"></a>3.2 ES6 中对象属性值为（常规）函数时的简略写法</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">let</span> z <span class="token operator">=</span> <span class="token number">3</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">'x'</span><span class="token punctuation">:</span> x<span class="token punctuation">,</span>  y<span class="token punctuation">,</span>  <span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span>x <span class="token operator">+</span> z<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span>  hello <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// （常规）函数</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>obj<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// hello</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-ES6-中对象属性值为（异步）函数时的简略写法"><a href="#3-3-ES6-中对象属性值为（异步）函数时的简略写法" class="headerlink" title="3.3 ES6 中对象属性值为（异步）函数时的简略写法"></a>3.3 ES6 中对象属性值为（异步）函数时的简略写法</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">let</span> z <span class="token operator">=</span> <span class="token number">3</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">'x'</span><span class="token punctuation">:</span> x<span class="token punctuation">,</span>  y<span class="token punctuation">,</span>  <span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span>x <span class="token operator">+</span> z<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token operator">*</span> hello <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// （异步）函数</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>obj<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面异步函数的简略写法：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">*</span> hello <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>等价于</p><pre class="line-numbers language-javascript"><code class="language-javascript">hello<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token operator">*</span> hello <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>注：ES5 中是不允许在对象中增加异步函数的，而 ES6 中是允许的</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 异步函数示例：</span><span class="token keyword">function</span> <span class="token operator">*</span> functionName <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里只简单提一下异步函数，后面我们再细讲。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
            <tag> Object </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 Function 之箭头函数</title>
      <link href="/archives/5bf28737.html"/>
      <url>/archives/5bf28737.html</url>
      
        <content type="html"><![CDATA[<h1 id="ES6-中的箭头函数"><a href="#ES6-中的箭头函数" class="headerlink" title="ES6 中的箭头函数"></a>ES6 中的箭头函数</h1><h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0 前言"></a>0 前言</h2><p>ES6 中的箭头函数长这样：<code>()=&gt;{}</code></p><h2 id="1-ES6-之前声明函数的做法"><a href="#1-ES6-之前声明函数的做法" class="headerlink" title="1 ES6 之前声明函数的做法"></a>1 ES6 之前声明函数的做法</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 方式 1：函数声明</span><span class="token keyword">function</span> hello1 <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 方式 2：函数表达式，又叫函数字面量</span><span class="token keyword">let</span> hello2 <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 方式 3：函数构造法，参数必须加引号</span><span class="token keyword">let</span> hello3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-ES6-中使用箭头函数声明函数"><a href="#2-ES6-中使用箭头函数声明函数" class="headerlink" title="2 ES6 中使用箭头函数声明函数"></a>2 ES6 中使用箭头函数声明函数</h2><h3 id="2-1-箭头函数的声明"><a href="#2-1-箭头函数的声明" class="headerlink" title="2.1 箭头函数的声明"></a>2.1 箭头函数的声明</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 声明一个函数，函数名为 hello</span><span class="token keyword">let</span> hello <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 注意：小括号不能省略哦</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 调用这个函数</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// hello world</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面声明的这个函数是无参的，如果想要传参数又该怎么办呢？可以这样做：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 声明一个函数，函数名为 hello，可以接收一个 name 参数</span><span class="token keyword">let</span> hello <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">'jjLin'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// hello world jjLin</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面是传了一个参数，如果想传第二个呢？可以这样写：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> hello <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> city<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> city<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">'jjLin'</span><span class="token punctuation">,</span> <span class="token string">'shanghai'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// hello world jjLin shanghai</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>以此类推，想传 3 个、4 个…..多个参数时，只要用逗号隔开，依次往后写即可。</p><p><strong><em>注意</em></strong>：没有参数时，箭头（=&gt;）前面的那对小括号不能省略哦！</p><h3 id="2-2-箭头函数声明时的省略与简写"><a href="#2-2-箭头函数声明时的省略与简写" class="headerlink" title="2.2 箭头函数声明时的省略与简写"></a>2.2 箭头函数声明时的省略与简写</h3><p>当且仅当只有一个参数时，箭头（=&gt;）前面的那对小括号才能省略。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> hello <span class="token operator">=</span> name <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">'jjLin'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// hello world jjLin</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>既然小括号可以省略，那么后面的花括号能不能省略呢？</p><p>是的，当箭头函数的函数体<strong>只有</strong>一个 <code>return</code> 语句时，可以省略 <code>return</code> 关键字和方法体的花括号。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> x <span class="token operator">+</span> y <span class="token operator">+</span> z <span class="token comment" spellcheck="true">// x + y + z 是一个表达式，这个表达式的值就是函数的返回值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当返回对象字面量时，记住用 <code>params =&gt; {object:literal}</code> 这种简单的语法是行不通的。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> func <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// Calling func() returns undefined!</span><span class="token keyword">var</span> func <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// SyntaxError: function statement requires a name</span><span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  x<span class="token punctuation">:</span> x<span class="token punctuation">,</span>  y<span class="token punctuation">:</span> y<span class="token punctuation">,</span>  z<span class="token punctuation">:</span> z<span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// Uncaught SyntaxError: Unexpected token ':'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是因为花括号（<code>{}</code>）里面的代码被解析为一系列语句（即 <code>foo</code> 被认为是一个标签，而非对象字面量的组成部分）。</p><p>所以，记得用圆括号把对象字面量包起来：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> func <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>foo<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>  x<span class="token punctuation">:</span> x<span class="token punctuation">,</span>  y<span class="token punctuation">:</span> y<span class="token punctuation">,</span>  z<span class="token punctuation">:</span> z<span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {x: 1, y: 2, z: 3}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以把上述代码中箭头后面的这对圆括号的作用理解成运算表达式的作用，而里面的这对花括号，可不是函数体的花括号，而是字面量对象的花括号哦！</p><p>当然，如果不想记这些情况下的简写形式，也可以老老实实地加上函数体的花括号、加上 <code>return</code> 关键字。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    x<span class="token punctuation">:</span> x<span class="token punctuation">,</span>    y<span class="token punctuation">:</span> y<span class="token punctuation">,</span>    z<span class="token punctuation">:</span> z  <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {x: 1, y: 2, z: 3}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-箭头函数没有单独的-this"><a href="#3-箭头函数没有单独的-this" class="headerlink" title="3 箭头函数没有单独的 this"></a>3 箭头函数没有单独的 this</h2><p>在箭头函数出现之前，每一个新函数根据它是被如何调用的来定义这个函数的 this 值：</p><ul><li>如果是该函数是一个构造函数，this 指针指向一个新的对象</li><li>在严格模式下的函数调用下，this 指向 <code>undefined</code></li><li>如果是该函数是一个对象的方法，则它的 this 指针指向这个对象</li><li>等等</li></ul><p><code>this</code> 被证明是令人厌烦的面向对象风格的编程。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> Person <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Person() 构造函数定义 `this` 作为它自己的实例.</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">0</span>  <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> growUp <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 在非严格模式, growUp() 函数定义 `this` 作为全局对象,</span>    <span class="token comment" spellcheck="true">// 与在 Person() 构造函数中定义的 `this` 并不相同.</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">++</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 ESMAScript 3/5 中，通过将 <code>this</code> 值分配给封闭的变量，可以解决 <code>this</code> 问题。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> Person <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span>  that<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">0</span>  <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> growUp <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 回调引用的是`that`变量, 其值是预期的对象.</span>    that<span class="token punctuation">.</span>age<span class="token operator">++</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者，可以创建<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" target="_blank" rel="noopener">绑定函数</a>，以便将预先分配的 <code>this</code> 值传递到绑定的目标函数（上述示例中的 <code>growUp() 函数</code> ）。</p><p>箭头函数不会创建自己的 <code>this，它只会从自己的作用域链的上一层继承 this</code>。因此，在下面的代码中，传递给 <code>setInterval</code> 的函数内的 <code>this</code> 与封闭函数中的 <code>this</code> 值相同：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> Person <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">0</span>  <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">++</span> <span class="token comment" spellcheck="true">// this 正确地指向 p 实例</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面，我们举个前端面试中常出现的一个小题目：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> test <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'test'</span><span class="token punctuation">,</span>  say<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>test<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// test</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>问 <code>test.say()</code> 的结果是什么？</p><p>没错，是“test”。那么，为什么是“test”呢？</p><p>在之前学习作用域时，我们总结过，判断 <code>this</code> 的指向时，可以看下是<code>谁在调用这个 function，那么 this 就指向谁</code>。</p><p>在这里，<code>say()</code> 是被 <code>test</code> 调用的，那么 <code>say()</code> 里面的 <code>this</code> 就是指向的 <code>test</code>，所以 <code>this.name</code> 就是 <code>test.name</code>，也就是“test”啦。</p><p>好，重点来了，我们把上面的这个 function 改成箭头函数，再看结果是什么。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> test <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'test'</span><span class="token punctuation">,</span>  say<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>test<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// undefined {}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><em>普通函数和箭头函数对 this 的指向的定义不同，ES5 中，谁在调用这个 function，那么 this 就指向谁；而 ES6 中，定义的时候 this 的指向是什么，那执行的时候 this 的指向就是什么。</em></strong></p><p>可以看到，上面箭头函数中的 this 是空对象，这是为什么呢？</p><p>如果我们将上面的代码块放到 chrome 浏览器的 Console 中执行，可以看到 this 其实是 Window 对象。</p><p><img src="https://myimagebed-1302088591.cos.ap-nanjing.myqcloud.com/2020-07-12-ES6-Function-%E4%B9%8B%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/image-20200712175149712.png" alt="image-20200712175149712"></p><p>那前面的 this 为什么是空对象呢？</p><p>这是因为前面的代码是经 webpack 构建过的，构建过程中对代码进行了 eval（js 的 eval 函数，可以把字符串当代码来执行），eval 把我们代码最外层的作用域指向了一个空对象，所以 this 也就指向了一个空对象。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
            <tag> Function </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 Function 之传入的参数是收敛了所有参数的数组的处理</title>
      <link href="/archives/2f26d31c.html"/>
      <url>/archives/2f26d31c.html</url>
      
        <content type="html"><![CDATA[<h2 id="如何处理参数确定但传入的参数是收敛了所有参数的数组的问题"><a href="#如何处理参数确定但传入的参数是收敛了所有参数的数组的问题" class="headerlink" title="如何处理参数确定但传入的参数是收敛了所有参数的数组的问题"></a>如何处理参数确定但传入的参数是收敛了所有参数的数组的问题</h2><p>上一小节中，我们讲述了使用 Rest 参数处理不确定参数的内容，即函数在定义时，参数是不确定的，这时就可以用 Rest 参数将这些不确定的参数收敛进 Rest 参数这个数组中来。那么，还有一种与之相反的情况，就是函数在设计参数的时候，参数是确定的，但是函数在接收参数时，接收到的是一个收敛了所有参数的数组参数。</p><p>下面我们用求和来举例说明。</p><h3 id="1-ES5"><a href="#1-ES5" class="headerlink" title="1. ES5"></a>1. ES5</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> sum <span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z<span class="token punctuation">}</span><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 假设为后端给的数据，需要是一个数组</span><span class="token comment" spellcheck="true">// 方法 1：通过索引把数据一个一个取出来</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 15</span><span class="token comment" spellcheck="true">// 方法 2：使用 apply 方法</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 15</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-ES6"><a href="#2-ES6" class="headerlink" title="2. ES6"></a>2. ES6</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> sum <span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z<span class="token punctuation">}</span><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 假设为后端给的数据，需要是一个数组</span><span class="token comment" spellcheck="true">// 方法 3（ES 6 中的做法）：使用 Spread Operator “...”</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token operator">...</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 15</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
            <tag> Function </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 Function 之不确定参数的处理</title>
      <link href="/archives/3e5c670f.html"/>
      <url>/archives/3e5c670f.html</url>
      
        <content type="html"><![CDATA[<h2 id="如何处理不确定参数的问题"><a href="#如何处理不确定参数的问题" class="headerlink" title="如何处理不确定参数的问题"></a>如何处理不确定参数的问题</h2><p>上一小节中，我们已经提到了 ES5 中如何处理不确定参数的问题，非常简单，就是使用 <code>arguments</code>，<code>arguments</code> 可以获取到当前函数接收到的所有参数。但是 ES6 中不让在函数内部使用 <code>arguments</code>，那该怎么做呢？</p><p>下面我们用求和来举例说明。</p><h3 id="1-ES5"><a href="#1-ES5" class="headerlink" title="1. ES5"></a>1. ES5</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> sum <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment" spellcheck="true">// 方法 1：使用原型链和 call 方法遍历伪数组 arguments</span>  Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>forEach<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>    num <span class="token operator">+</span><span class="token operator">=</span> item <span class="token operator">*</span> <span class="token number">1</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> num<span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 6</span><span class="token comment" spellcheck="true">/* 运行结果：6*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> sum <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment" spellcheck="true">// 方法 2：使用 ES6 中的 Array.from 方法先将伪数组 arguments 转化为数组，再使用 forEach 方法遍历数组</span>  Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>    num <span class="token operator">+</span><span class="token operator">=</span> item <span class="token operator">*</span> <span class="token number">1</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> num<span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 6</span><span class="token comment" spellcheck="true">/* 运行结果：6*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：<br>知识点 1：ES5 中，用 arguments 获取到所有参数；<br>知识点 2：arguments 是伪数组，可以用 Array 原型链的 forEach，然后使用 call 方法，对 arguments 进行遍历；也可以用 ES6 的 Array.from 方法对 arguments 进行遍历。</p></blockquote><h3 id="2-ES6"><a href="#2-ES6" class="headerlink" title="2. ES6"></a>2. ES6</h3><p>ES6 中使用 Rest parameter（Rest 参数，形如“…参数名”）替代使用 arguments 的方法，Rest 参数接收函数的多余参数，组成一个<strong><em>数组</em></strong>，放在形参的最后，形式如下：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> sum <span class="token punctuation">(</span><span class="token operator">...</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">0</span>  nums<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// nums 是个数组，直接使用 forEach</span>    num <span class="token operator">+</span><span class="token operator">=</span> item <span class="token operator">*</span> <span class="token number">1</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> num<span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 运行结果：11*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>假如我们需要对传入函数的第一个参数单独处理，可以这样写：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> sum <span class="token punctuation">(</span>base<span class="token punctuation">,</span> <span class="token operator">...</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">0</span>  nums<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>    num <span class="token operator">+</span><span class="token operator">=</span> item <span class="token operator">*</span> <span class="token number">1</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> base <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> num <span class="token comment" spellcheck="true">// 第一个参数 base 乘以 2 后再与其它参数相加</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
            <tag> Function </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 Function 之参数默认值的处理</title>
      <link href="/archives/cfa4ba82.html"/>
      <url>/archives/cfa4ba82.html</url>
      
        <content type="html"><![CDATA[<h2 id="函数参数默认值的处理"><a href="#函数参数默认值的处理" class="headerlink" title="函数参数默认值的处理"></a>函数参数默认值的处理</h2><p>[TOC]</p><h3 id="1-ES5"><a href="#1-ES5" class="headerlink" title="1. ES5"></a>1. ES5</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> f <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">===</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>    y <span class="token operator">=</span> <span class="token number">7</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>z <span class="token operator">===</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>    z <span class="token operator">=</span> <span class="token number">42</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z<span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 运行结果：505152*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-ES6"><a href="#2-ES6" class="headerlink" title="2. ES6"></a>2. ES6</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 注意：没有默认值的参数写在前面，有默认值的参数写在后面</span><span class="token keyword">function</span> f <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z<span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 使用“undefined”实现中间参数的默认值赋值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> undefined<span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 运行结果：50515251*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数的默认值可以指定为常量，也可以是“前面”参数的运算表达式：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> f <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">,</span> z <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> z<span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> undefined<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1 * 10 + 2 = 12</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1 * 10 + (1 + 7) = 18</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1 * 10 + (1 + 9) = 20</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> undefined<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1 * 10 + (1 + 7) = 18</span><span class="token comment" spellcheck="true">/* 运行结果：12182018*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数的默认值如果指定为其它参数的表达式，那么表达式中的参数必须是前面已定义的参数，所以像下面这样指定 y 参数的默认值是错误的：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> f <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">=</span> x <span class="token operator">+</span> z<span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 'z' was used before it was defined.</span>  <span class="token keyword">return</span> x <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> y<span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Uncaught ReferenceError: Cannot access 'z' before initialization</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>查看当前函数的参数信息：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> f <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">,</span> z <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 通过 arguments 查看当前函数的参数的信息</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 当前函数传入的参数个数</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 当前函数传入的参数信息，Array.from 用来转换伪数组为数组</span>  <span class="token keyword">return</span> x <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> z<span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> undefined<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 传了 3 个参数</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 传了 2 个参数</span><span class="token comment" spellcheck="true">/* 运行结果：Arguments(3) [1, undefined, 2, callee: (...), Symbol(Symbol.iterator): ƒ]3(3) [1, undefined, 2]12Arguments(2) [1, 2, callee: (...), Symbol(Symbol.iterator): ƒ]2(2) [1, 2]13*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码的运行结果截图：</p><p><img src="https://myimagebed-1302088591.cos.ap-nanjing.myqcloud.com/2020-07-12-ES6-Function-%E4%B9%8B%E5%8F%82%E6%95%B0%E9%BB%98%E8%AE%A4%E5%80%BC%E7%9A%84%E5%A4%84%E7%90%86/image-20200705164938961.png" alt="image-20200705164938961"></p><p>上面我们使用了 arguments 来获取当前函数传入的参数信息，但到了 ES6 中，其实是禁止使用 arguments 的，那怎么办呢？有办法，我们后面再讲，这里先讲一下如何获取“<strong><em>函数定义时未指定默认值的参数个数</em></strong>”，我们可以使用“函数名.length”的方式实现</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> f <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">,</span> z <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 注意：没有默认值的参数写在前面，有默认值的参数写在后面</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1</span>  <span class="token keyword">return</span> x <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> z<span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> undefined<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 运行结果：112*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面我们把上面函数参数列表中的 y 的默认值去掉，再看 <code>f.length</code> 的值：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> f <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 注意：没有默认值的参数写在前面，有默认值的参数写在后面</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2</span>  <span class="token keyword">return</span> x <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> z<span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> undefined<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 运行结果：212*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：<code>arguments.length</code> 和 <code>function.length</code> 的区别：<br><code>arguments.length</code> 获取到的是“函数执行时接收到的参数个数”；<br><code>function.length</code> 获取到的不是“函数执行时接收到的参数个数”，而是“函数定义时未指定默认值的参数个数（出现首个有默认值的参数前的参数个数）”。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
            <tag> Function </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 Class 之继承类</title>
      <link href="/archives/b4ab4d3f.html"/>
      <url>/archives/b4ab4d3f.html</url>
      
        <content type="html"><![CDATA[<h2 id="ES5-和-ES6-中继承类的区别"><a href="#ES5-和-ES6-中继承类的区别" class="headerlink" title="ES5 和 ES6 中继承类的区别"></a>ES5 和 ES6 中继承类的区别</h2><p>假设有一个 Animal 类，现在想要定义一个 Dog 类，这个 Dog 类要继承 Animal 类。那么该怎么做呢？</p><h3 id="1-ES5"><a href="#1-ES5" class="headerlink" title="1. ES5"></a>1. ES5</h3><p>我们前面讲过，ES5 中，声明类的函数就是类的构造函数，至少这个函数起到了构造函数的作用。现在我们想继承 Animal 这个父类，就需要在声明子类 Dog 类的这个函数中先运行一遍 Animal 的构造函数，并且把实例对象的指针指向当前的 Dog 类。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* ES5 中有很多继承方法，这里只举一个 */</span><span class="token keyword">let</span> Animal <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">}</span>Animal<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>eat <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  Animal<span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am eating food.'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>Animal<span class="token punctuation">.</span>walk <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am walking.'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定义子类 Dog，并继承父类 Animal 构造函数中的属性和方法</span><span class="token keyword">let</span> Dog <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 初始化父类的构造函数（下面 call 方法的作用是将 Animal 类中的 this 指向到当前类（Dog 类）的实例对象上去，</span>  <span class="token comment" spellcheck="true">// 这就能让父类的（构造函数中的）属性和方法挂载到当前的实例对象上，也就实现了“一部分”继承（只继承了父类构造函数中的属性和方法，未继承父类原型链上的属性和方法）；</span>  <span class="token comment" spellcheck="true">// 后面的'dog'是父类构造函数需要传的参数）</span>  Animal<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 给 Dog 类的实例对象挂载 run 方法</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>run <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I can run.'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 子类继承父类的原型链，prototype 是对象，是引用类型，这边赋的是地址值</span>Dog<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Animal<span class="token punctuation">.</span>prototype<span class="token keyword">let</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span>dog<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 运行结果：I am walking.I am eating food.*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，用这种方式实现继承需要做两步操作：一是初始化父类的构造函数，二是改变子类的原型链指向。</p><p>好像有点小麻烦……那 ES6 中继承一个类是不是会简单点呢？我们往下看。</p><h3 id="2-ES6"><a href="#2-ES6" class="headerlink" title="2. ES6"></a>2. ES6</h3><p>ES6 的继承很简单，用一个单词（extends）就能实现啦。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* ES6 中继承一个类 */</span><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  constructor <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 定义实例对象的方法</span>  eat <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Animal<span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 调用静态方法 walk()，静态方法就是属于类的，调用时要用类名调用</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am eating food...'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 定义类的静态方法</span>  <span class="token keyword">static</span> walk <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'walk walk'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 声明 Dog 类，同时继承 Animal 类</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 编写构造函数</span>  constructor <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">2</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'dog'</span><span class="token punctuation">)</span>dog<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 运行结果：walk walkI am eating food...Dog {type: "dog", age: 2}*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码在声明 Dog 类时，如果构造函数中只需继承父类的构造函数，即没有 <code>this.age = 2</code> 这行代码时，这块代码也可以省略不写，即下面这块代码可以省略不写：</p><pre class="line-numbers language-javascript"><code class="language-javascript">  constructor <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>另外，父类的构造函数中如果需要传参数，子类那边继承父类的构造函数时也要传参数，也就是 <code>super()</code> 函数也要传参数，就像上面传了个 <code>type</code> 进来，你甚至可以写成这样：</p><pre class="line-numbers language-javascript"><code class="language-javascript">  constructor <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">'panda'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>总之，父类的构造函数中如果需要传参数，子类那边的 <code>super()</code> 函数就要传参数。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
            <tag> Class </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 Class 之操作方法</title>
      <link href="/archives/a52095f.html"/>
      <url>/archives/a52095f.html</url>
      
        <content type="html"><![CDATA[<h2 id="ES5-和-ES6-中操作方法的区别"><a href="#ES5-和-ES6-中操作方法的区别" class="headerlink" title="ES5 和 ES6 中操作方法的区别"></a>ES5 和 ES6 中操作方法的区别</h2><p>操作一个方法，这里的“方法”包括：</p><ol><li>对象实例的方法</li><li>类的静态方法</li></ol><p>对象实例的方法之前已经讲过，这里不再赘述，下面主要讲下类的静态方法。</p><h3 id="1-ES5"><a href="#1-ES5" class="headerlink" title="1. ES5"></a>1. ES5</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* ES5 中类的声明、实例对象的方法的声明、类的静态方法的声明 */</span><span class="token keyword">let</span> Animal <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token comment" spellcheck="true">//   this.eat = function () {} // 实例对象的方法挂载在 this 上</span><span class="token punctuation">}</span>Animal<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>eat <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 实例对象的方法挂载在 prototype 上，即挂载到类的原型链上</span>  Animal<span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 调用静态方法 walk()，静态方法就是属于类的，调用时要用类名调用</span>  <span class="token comment" spellcheck="true">//   this.walk() // 调用实例对象的 walk() 方法，因为并不存在，所以会报错。this 表示实例对象</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'eat food'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>Animal<span class="token punctuation">.</span>walk <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 静态方法挂载在类上</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am walking.'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">let</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'dog'</span><span class="token punctuation">)</span>dog<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>dog<span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 报错！静态方法 walk() 在实例对象上是找不到的</span><span class="token comment" spellcheck="true">/* 运行结果：I am walking.eat foodUncaught TypeError: dog.walk is not a function*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-ES6"><a href="#2-ES6" class="headerlink" title="2. ES6"></a>2. ES6</h3><p>ES6 中通过使用 static 定义类的静态方法。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* ES6 中类的声明、实例对象的方法的声明、类的静态方法的声明 */</span><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  constructor <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 定义实例对象的方法</span>  eat <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Animal<span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 调用静态方法 walk()，静态方法就是属于类的，调用时要用类名调用</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am eating food...'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 定义类的静态方法</span>  <span class="token keyword">static</span> walk <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'walk walk'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'dog'</span><span class="token punctuation">)</span>dog<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 运行结果：walk walkI am eating food...*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么，在实际开发中，什么时候用实例对象的方法，什么时候用类的静态方法呢？这里可以给大家做一个小小的建议，如果说你的这个方法依赖于对象的某些属性或方法，那么此方法就必须定义为实例对象的方法，也就是说这个方法的内部要引用实例对象的一些信息；反之，如果说这个方法里面不会设计到实例对象的内容，那就用类的静态方法。其实非常简单，类的静态方法拿不到当前的的实例对象。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
            <tag> Class </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 Class 之读写属性</title>
      <link href="/archives/cd36a7a7.html"/>
      <url>/archives/cd36a7a7.html</url>
      
        <content type="html"><![CDATA[<h2 id="ES5-和-ES6-中读写属性的区别"><a href="#ES5-和-ES6-中读写属性的区别" class="headerlink" title="ES5 和 ES6 中读写属性的区别"></a>ES5 和 ES6 中读写属性的区别</h2><h3 id="1-ES5"><a href="#1-ES5" class="headerlink" title="1. ES5"></a>1. ES5</h3><p>ES5 中通过“this.属性”的方式读写一个属性。</p><h3 id="2-ES6"><a href="#2-ES6" class="headerlink" title="2. ES6"></a>2. ES6</h3><p>ES6 中可以轻松地实现对属性的读写操作，同时可以对属性进行保护和只读。</p><p>如果设置对象的属性为只读，可以这样写：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  constructor <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// age 属性只提供 get，就相当于设置为了只读</span>  <span class="token keyword">get</span> age <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 函数前加 get 或 set 就变成了属性，ES6 中允许把属性放在类的最顶层（没有被嵌套到构造函数里）</span>    <span class="token keyword">return</span> <span class="token number">4</span>  <span class="token punctuation">}</span>  eat <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am eating food...'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'dog'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span>age<span class="token punctuation">)</span>dog<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">5</span> <span class="token comment" spellcheck="true">// 修改 age 属性的值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 运行结果：44*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，age 属性设置为只读后，我们尝试重新赋值，age 的值并没有改变。</p><p>如果我们还想让 age 可写，可以这样做：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  constructor <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type  <span class="token punctuation">}</span>  <span class="token keyword">get</span> age <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token number">4</span>  <span class="token punctuation">}</span>  <span class="token keyword">set</span> age <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>realAge <span class="token operator">=</span> val <span class="token comment" spellcheck="true">// 注意：这里不能写成 this.age 否则就导致 this.age 和 set age (val) 形成死循环了。</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 注意：上面的两个 age 可以理解为对外的出入口名称，而不是实例对象的属性名。</span>  eat <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am eating food...'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'dog'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span>age<span class="token punctuation">)</span>dog<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">5</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span>realAge<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 运行结果：45*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，dog.age 赋值为 5 后，realAge 也被成功修改了。</p><p>注意，在写 set 的时候，不能写成这样：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">set</span> age <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> val<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>为什么呢？因为上述代码中，当我们给 this.age 赋值时，会再次进入 set age (val) 中，这不就形成死循环了吗？所以不能这么写。</p><p>我们还可以结合私有属性的概念，做出如下修改：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> _age <span class="token operator">=</span> <span class="token number">4</span><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  constructor <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 利用闭包实现对 _age 这一私有属性的保护</span>  <span class="token keyword">get</span> age <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 函数前加 get 或 set 就变成了属性，ES6 中允许把属性放在类的最顶层</span>    <span class="token keyword">return</span> _age <span class="token comment" spellcheck="true">// 注意：返回值和“出入口”的名字不能一样（比如这里如果写成 return age 就会导致死循环了）</span>  <span class="token punctuation">}</span>  <span class="token keyword">set</span> age <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">></span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> val <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      _age <span class="token operator">=</span> val    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 注意：上面的两个 age 可以理解为访问时的出入口，而不是实例对象的属性名。</span>  eat <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 定义实例对象的方法</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am eating food...'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'dog'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span>age<span class="token punctuation">)</span>dog<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">5</span>dog<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">8</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// set 和 get 本身是函数，但是调用它们时是按属性调用的，所以这里的 age 后面不加括号</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span>_age<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 运行结果：45undefined*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码中，为什么把对 <code>_age</code> 的声明放在 class 外面，而不是 class 里面，比如说放在 constructor 中呢？这是因为现在的语法还不支持私有属性，我们只能用<strong><em>闭包</em></strong><a href="闭包是指有权访问另一个函数作用域中的变量的函数。">^1</a>的方式去做。<code>_age</code> 通过 dog 这个实例是取不到的，因为我们暴露的是 Animal 这个类的实例，而 <code>_age</code> 这个变量不在这个实例中，所以拿不到，因此上面的代码最后打印 <code>dog._age</code> 的结果是 undefined。但是，在 get 和 set 中可以拿到 <code>_age</code>，因为它们在相同的顶层作用域中。</p><blockquote><p>总结：ES5 中通过“this.属性”的方式读写一个属性，但是做不到有条件地读写；而 ES6 中通过 set 和 get 的方式能让我们在属性的读写上有更大的操作权，实现有条件的读写。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
            <tag> Class </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 Class 之类的声明</title>
      <link href="/archives/daad3a2d.html"/>
      <url>/archives/daad3a2d.html</url>
      
        <content type="html"><![CDATA[<h2 id="ES5-和-ES6-中声明类的区别"><a href="#ES5-和-ES6-中声明类的区别" class="headerlink" title="ES5 和 ES6 中声明类的区别"></a>ES5 和 ES6 中声明类的区别</h2><h3 id="1-ES5"><a href="#1-ES5" class="headerlink" title="1. ES5"></a>1. ES5</h3><p>ES5 中没有专门的类的语法，它是用函数（对于一个类来说，肯定要有构造函数，构造函数解决两个问题：第一个是传参数；第二个是实例化，也就是初始化）去模拟的。</p><p>举例：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 定义一个 Animal 类</span><span class="token keyword">let</span> Animal <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type <span class="token comment" spellcheck="true">// 定义一个属性并初始化</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>eat <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 定义一个 eat() 方法</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 生成一个 dog 实例对象</span><span class="token keyword">let</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'dog'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 生成一个 monkey 实例对象</span><span class="token keyword">let</span> monkey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'monkey'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 打印这个 dog 实例对象</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 打印这个 monkey 实例对象</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>monkey<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 运行结果：Animal {type: "dog", eat: ƒ}Animal {type: "monkey", eat: ƒ}*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果看起来好像没什么问题，那我们修改一下类中的 eat 方法，在上面的 eat 方法中再添加一条语句，同时修改 monkey 对象的 eat 方法，然后分别调用 dog 和 monkey 的 eat 方法：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> Animal <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type  <span class="token keyword">this</span><span class="token punctuation">.</span>eat <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am eating food.'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 在 eat 方法中添加一条语句</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'dog'</span><span class="token punctuation">)</span><span class="token keyword">let</span> monkey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'monkey'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>monkey<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 修改 monkey 对象的 eat 方法</span>monkey<span class="token punctuation">.</span>eat <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 分别调用 dog 和 monkey 的 eat 方法</span>dog<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>monkey<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 运行结果：Animal {type: "dog", eat: ƒ}Animal {type: "monkey", eat: ƒ}I am eating food.error*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，修改了 monkey 对象的 eat 方法后，并没有影响到 dog 对象的 eat 方法。dog 成功执行了继承自 Animal 的 eat 方法，而 monkey 继承自 Animal 的 eat 方法被修改后，执行的就不再是 Animal 的 eat 方法，而是自己的 eat 方法了，这就<strong><em>违背了继承的原则</em></strong>，什么是继承？继承就是实例对象都继承了父类的某个方法，如果父类修改了这个方法，那么所有实例对象都会跟着改变。</p><p>此外，这样定义一个类还有一个问题，就是生成的每个实例对象都很大，因为每个对象都会有一个 eat 方法。那么该怎么写呢？</p><p>其实，非常简单，只要把共有的方法（这里就是 eat 方法）写在这个 function 的原型链（函数都有的一个对象，叫做 prototype，类继承的工作原理就是会沿着原型链往上找）上即可：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> Animal <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 使用原型链的方式定义 eat() 方法</span>Animal<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>eat <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am eating food.'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">let</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'dog'</span><span class="token punctuation">)</span><span class="token keyword">let</span> monkey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'monkey'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>monkey<span class="token punctuation">)</span>dog<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>monkey<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 运行结果：Animal {type: "dog"}Animal {type: "monkey"}I am eating food.I am eating food.*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果截图如下：</p><p><img src="https://myimagebed-1302088591.cos.ap-nanjing.myqcloud.com/2020-07-12-ES6-Class-%E4%B9%8B%E7%B1%BB%E7%9A%84%E5%A3%B0%E6%98%8E/image-20200620224115009.png" alt="image-20200620224115009"></p><p>上图中，<code>{type: "dog"}</code> 和 <code>{type: "monkey"}</code> 分别代表两个实例的本身，然后这两个实例都指向了作用域的上一层，也就是原型链上，上面挂载了 eat 方法，这就是用的原型链的方式做了继承（可以理解成一个树根和两个树杈，所有公共方法都放在了树根上，而不是树杈上）。结果就是都输出了相同的内容。</p><p>这时，如果我们修改其中一个实例对象原型链上的 eat 方法，另一个实例对象的原型链上的 eat 方法也会跟着改变：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> Animal <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type <span class="token punctuation">}</span>Animal<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>eat <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am eating food.'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">let</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'dog'</span><span class="token punctuation">)</span><span class="token keyword">let</span> monkey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'monkey'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>monkey<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 修改 monkey 对象原型链上的 eat 方法</span>monkey<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>eat <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// monkey.constructor 指的就是定义 Animal 的 function</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>dog<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>monkey<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 运行结果：Animal {type: "dog"}Animal {type: "monkey"}errorerror*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，最后都打印出了“error”。</p><blockquote><p>总结：ES5 中，把定义类的 function 当成构造函数去用，function 内只写实例对象独有的东西，而公有的东西都放到原型链上去。</p></blockquote><h3 id="2-ES6"><a href="#2-ES6" class="headerlink" title="2. ES6"></a>2. ES6</h3><p>ES6 使用 class 声明类，例如：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 构造函数，传参，初始化</span>  constructor <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 定义一个 eat() 方法</span>  eat <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am eating food.'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 生成一个 dog 实例对象</span><span class="token keyword">let</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'dog'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 生成一个 monkey 实例对象</span><span class="token keyword">let</span> monkey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'monkey'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>monkey<span class="token punctuation">)</span>dog<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>monkey<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 打印 Animal 的类型</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> Animal<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 运行结果：Animal {type: "dog"}Animal {type: "monkey"}I am eating food.I am eating food.function*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果截图如下：</p><p><img src="https://myimagebed-1302088591.cos.ap-nanjing.myqcloud.com/2020-07-12-ES6-Class-%E4%B9%8B%E7%B1%BB%E7%9A%84%E5%A3%B0%E6%98%8E/image-20200621201728815.png" alt="image-20200621201728815"></p><p>可以看到，上面通过 typeof 判断出 class 声明的 Animal 的类型也是 function（ES5 中就是用的 function 声明的类），eat 方法位于两个实例对象的原型链上，也就是说和 ES5 中直接写在 function 的原型链上的效果是一样的。换句话说，<strong><em>ES6 中的 class 只是 ES5 中用原型链声明类的语法糖</em></strong><a href="指计算机语言中添加的某种语法，这种语法对语言的功能并没有影响，但是更方便程序员使用。通常来说使用语法糖能够增加程序的可读性，从而减少程序代码出错的机会。">^1</a>（语法不一样，但本质是一样的）。</p><blockquote><p>总结：ES6 中的 class 实际上是 ES5 中用原型链声明类的语法糖。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
            <tag> Class </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 Array 之查找元素</title>
      <link href="/archives/b9568ebc.html"/>
      <url>/archives/b9568ebc.html</url>
      
        <content type="html"><![CDATA[<h2 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h2><table><thead><tr><th align="center">方法</th><th align="center">关注点</th><th>返回值</th><th align="center">JavaScript 版本</th></tr></thead><tbody><tr><td align="center"><code>filter()</code></td><td align="center">满足条件的所有值</td><td>返回数组，包含了符合条件的所有元素。如果没有符合条件的元素则返回空数组。</td><td align="center">1.6</td></tr><tr><td align="center"><code>find()</code></td><td align="center">满足条件的第一个值</td><td>返回符合测试条件的第一个数组元素值，如果没有符合条件的则返回 <strong>undefined</strong>。</td><td align="center">ECMAScript 6</td></tr><tr><td align="center"><code>findIndex()</code></td><td align="center">满足条件的第一个值的位置</td><td>返回符合测试条件的第一个数组元素索引，如果没有符合条件的则返回 -1。</td><td align="center">ECMAScript 6</td></tr></tbody></table><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><h4 id="ES5"><a href="#ES5" class="headerlink" title="ES5"></a>ES5</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">/*使用 filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。注意： filter() 不会对空数组进行检测。注意： filter() 不会改变原始数组。语法：array.filter(function(currentValue,index,arr), thisValue)参数说明：    function(currentValue, index,arr)：必须。函数，数组中的每个元素都会执行这个函数        函数参数：            currentValue：必须。当前元素的值            index：    可选。当前元素的索引值            arr：    可选。当前元素属于的数组对象    thisValue：可选。对象作为该执行回调时使用，传递给函数，用作 "this" 的值。如果省略了 thisValue ，"this" 的值为 "undefined"*/</span><span class="token keyword">var</span> find1 <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Array.prototype.filter() 返回的是数组</span>  <span class="token keyword">return</span> item <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>find1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [3]</span><span class="token keyword">var</span> find2 <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Array.prototype.filter() 返回的是数组</span>  <span class="token keyword">return</span> item <span class="token operator">===</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>find2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// []</span><span class="token keyword">var</span> find3 <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Array.prototype.filter() 返回的是数组</span>  <span class="token keyword">return</span> item <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>find3<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [2, 4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>filter()</code> 函数的缺点是，它会把数组中的所有元素都检查一遍，这就可能影响性能了（有时候我们只想知道数组中有没有某个元素，找到后就不需要继续往下找了）。</p><h4 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h4><h5 id="1-Array-prototype-find"><a href="#1-Array-prototype-find" class="headerlink" title="1. Array.prototype.find"></a>1. Array.prototype.find</h5><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">let</span> find1 <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Array.prototype.find() 返回的是值</span>  <span class="token keyword">return</span> item <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>find1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 3</span><span class="token keyword">let</span> find2 <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Array.prototype.find() 返回的是值</span>  <span class="token keyword">return</span> item <span class="token operator">===</span> <span class="token number">31</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>find2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// undefined</span><span class="token keyword">let</span> find3 <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Array.prototype.find() 返回的是值</span>  <span class="token keyword">return</span> item <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>find3<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-Array-prototype-findIndex"><a href="#2-Array-prototype-findIndex" class="headerlink" title="2. Array.prototype.findIndex"></a>2. Array.prototype.findIndex</h5><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">let</span> find <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> item <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>find<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 Array 之生成新数组</title>
      <link href="/archives/3b6dd957.html"/>
      <url>/archives/3b6dd957.html</url>
      
        <content type="html"><![CDATA[<h2 id="生成新数组"><a href="#生成新数组" class="headerlink" title="生成新数组"></a>生成新数组</h2><h3 id="ES5"><a href="#ES5" class="headerlink" title="ES5"></a>ES5</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 方法一：使用 Array</span><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 生成一个长度为 5，每个元素为空的数组</span><span class="token comment" spellcheck="true">// 方法二：使用字面量对象</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 未指定长度</span><span class="token keyword">var</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 指定长度为 2，每个元素为空字符串</span><span class="token comment" spellcheck="true">/* 补充 */</span><span class="token comment" spellcheck="true">// push() 方法可向数组的末尾添加一个或多个元素，并返回新的长度。</span><span class="token comment" spellcheck="true">// 说明：push() 方法可把它的参数顺序添加到 arrayObject 的尾部。它直接修改 arrayObject，而不是创建一个新的数组。push() 方法和 pop() 方法使用数组提供的先进后出栈的功能。</span>arr2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'sh'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// pop() 方法用于删除并返回数组的最后一个元素。</span><span class="token comment" spellcheck="true">// 说明：pop() 方法将删除 arrayObject 的最后一个元素，把数组长度减 1，并且返回它删除的元素的值。如果数组已经为空，则 pop() 不改变数组，并返回 undefined 值。</span>arr2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h3><h4 id="1-Array-prototype-from"><a href="#1-Array-prototype-from" class="headerlink" title="1. Array.prototype.from"></a>1. Array.prototype.from</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 方法一：使用 Array.from，把伪数组转换为数组，实际上也是生成新数组的方式</span><span class="token keyword">let</span> arr1 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span> length<span class="token punctuation">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">''</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 生成一个长度为 3，每个元素值为空字符串的数组</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'sh'</span><span class="token punctuation">,</span> length<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 生成一个长度为 2，元素值分别为 1、'sh' 的数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-Array-prototype-of"><a href="#2-Array-prototype-of" class="headerlink" title="2. Array.prototype.of"></a>2. Array.prototype.of</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 方法二：使用 Array.of，生成一个新数组的同时，赋初值，实现快速地把 n 个元素放到数组中去。</span><span class="token keyword">let</span> arr1 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// arr1：[1]</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"sh"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// arr2：[1, 2, "sh"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3-Array-prototype-fill"><a href="#3-Array-prototype-fill" class="headerlink" title="3. Array.prototype.fill"></a>3. Array.prototype.fill</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 方法三：使用 fill() 方法，将一个固定值替换数组的元素。也可以实现为空数组赋值，生成一个元素初始化赋值后的新数组。</span><span class="token comment" spellcheck="true">/* 语法：array.fill(value, start, end)value：必需。填充的值。start：可选。开始填充位置。end：可选。停止填充位置 (默认为 array.length)*/</span><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// arr1：[17, 17, 17, 17, 17]</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>arr2<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [1, 2, 8, 8, 5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 Array 之伪数组转化为数组、声明数组并初始化赋值</title>
      <link href="/archives/5d61d34c.html"/>
      <url>/archives/5d61d34c.html</url>
      
        <content type="html"><![CDATA[<h2 id="伪数组转化为数组"><a href="#伪数组转化为数组" class="headerlink" title="伪数组转化为数组"></a>伪数组转化为数组</h2><h3 id="ES5-中"><a href="#ES5-中" class="headerlink" title="ES5 中"></a>ES5 中</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* 用法示例 */</span><span class="token comment" spellcheck="true">// 先用一个数组的方法，比如说 slice 方法，然后再用 call 方法传入伪数组，这样就能实现伪数组到数组的转换</span><span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// arguments 属于 collection。 这里只是演示在 ES5 中的做法，实际上，arguments 必须在函数体内部使用，此外，ES6 已经废弃了使用 arguments。</span><span class="token keyword">var</span> imgs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// document.querySelectorAll('img') 表示选中当前 DOM 树上所有的 img 标签，document.querySelectorAll('img') 属于 NodeList</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ES6-中"><a href="#ES6-中" class="headerlink" title="ES6 中"></a>ES6 中</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ES6 中的数组对象上新增了一个 API 叫 from，用来转换伪数组为数组。</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token keyword">from</span> <span class="token comment" spellcheck="true">// Array 是数组对象，prototype 是数组的原型对象，from 是 API</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* 用法示例 */</span><span class="token keyword">let</span> args <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token keyword">let</span> imgs <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>Array.from</code>完整的语法如下：</p><pre class="line-numbers language-javascript"><code class="language-javascript">Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>arrayLike<span class="token punctuation">,</span> mapFn<span class="token punctuation">,</span> thisArg<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// arrayLike：伪数组，mapFn：遍历的函数（就是每次都要执行的），thisArg：this 对象（如果传入的函数中用到了 this，那么 this 的指向就是这个 thisArg）</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>Array.from</code>除了把伪数组转换为数组，还能声明数组并初始化赋值，举例如下：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 声明一个长度为 5 的数组 array</span><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 用 for 循环给数组的所有元素赋值为 1</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 结果：(5) [1, 1, 1, 1, 1]*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面我们用<code>Array.from</code>声明数组并对数组元素初始化赋值：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> array <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span> length<span class="token punctuation">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 用 Array.from 遍历一个长度为 5 的伪数组，每次都返回 1，实现伪数组转换数组的同时，初始化赋值的效果</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 结果：(5) [1, 1, 1, 1, 1]*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对比 for 循环，用<code>Array from</code>声明数组并初始化赋值，代码就简洁多啦。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>声明变量的关键字 var 与 let 的区别</title>
      <link href="/archives/2ed88c32.html"/>
      <url>/archives/2ed88c32.html</url>
      
        <content type="html"><![CDATA[<h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><table><thead><tr><th>声明变量的关键字</th><th>块级作用域</th><th>通过 window 的属性访问</th><th>重复定义已声明的变量</th><th>进行变量提升</th></tr></thead><tbody><tr><td>var</td><td>无</td><td>能</td><td>能</td><td>会</td></tr><tr><td>let</td><td>有</td><td>不能</td><td>不能</td><td>不会</td></tr></tbody></table><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><h3 id="1-块级作用域："><a href="#1-块级作用域：" class="headerlink" title="1. 块级作用域："></a>1. 块级作用域：</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  <span class="token keyword">var</span> a1 <span class="token operator">=</span> <span class="token number">1</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 这边的这对花括号其实是多余的（Block is redundant（块是多余的）），这里只是为了对比说明 var 和 let 的区别</span><span class="token comment" spellcheck="true">// 用 var 声明的变量 a1 没有块级作用域，在块外仍可以访问</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1</span><span class="token punctuation">{</span>  <span class="token keyword">let</span> a2 <span class="token operator">=</span> <span class="token number">1</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 用 let 声明的变量 a2 在块级作用域外无法访问</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 报错：Uncaught ReferenceError: a2 is not defined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-通过-window-的属性访问"><a href="#2-通过-window-的属性访问" class="headerlink" title="2. 通过 window 的属性访问"></a>2. 通过 window 的属性访问</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">3</span> <span class="token comment" spellcheck="true">// 用 var 定义全局变量b</span><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token number">4</span> <span class="token comment" spellcheck="true">// 用 let 定义全局变量c</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 3 4</span><span class="token comment" spellcheck="true">// 用 var 定义的全局变量能通过 window 的属性去访问</span><span class="token comment" spellcheck="true">// 用 let 定义的全局变量不能通过 window 的属性去访问（访问结果为 undefined）</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>b<span class="token punctuation">,</span> window<span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 3 undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-重复定义已声明的变量"><a href="#3-重复定义已声明的变量" class="headerlink" title="3. 重复定义已声明的变量"></a>3. 重复定义已声明的变量</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">3</span> <span class="token comment" spellcheck="true">// 用 var 定义全局变量b</span><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token number">4</span> <span class="token comment" spellcheck="true">// 用 let 定义全局变量c</span><span class="token comment" spellcheck="true">// 已经声明过的变量能用 var 重复声明</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">6</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 6</span><span class="token comment" spellcheck="true">// 已经声明过的变量不能用 let 重复声明</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">6</span> <span class="token comment" spellcheck="true">// 报错：Uncaught SyntaxError: Identifier 'b' has already been declared</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token number">6</span> <span class="token comment" spellcheck="true">// 报错：Uncaught SyntaxError: Identifier 'c' has already been declared</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-变量提升"><a href="#4-变量提升" class="headerlink" title="4. 变量提升"></a>4. 变量提升</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> test <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">4</span> <span class="token comment" spellcheck="true">// 此处会进行变量提升</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b = '</span> <span class="token operator">+</span> b<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 不会报错</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 上面函数 test() 中的变量 b 因为是用 var 定义的，浏览器 js 引擎会对其进行变量提升，最终会变成如下效果：</span><span class="token keyword">function</span> test <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span>  <span class="token keyword">var</span> b <span class="token comment" spellcheck="true">// b 变量提升后，就跑到了这个位置</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    b <span class="token operator">=</span> <span class="token number">4</span> <span class="token comment" spellcheck="true">// b 变量原来的位置</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b = '</span> <span class="token operator">+</span> b<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 而如果是 let，则不会进行变量提升</span><span class="token keyword">function</span> test <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">4</span> <span class="token comment" spellcheck="true">// 变量 b 是 let 定义的，不会进行变量提升，所以作用域被限制在本块中</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b = '</span> <span class="token operator">+</span> b<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 报错：Uncaught ReferenceError: b is not defined</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
            <tag> Scope </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 Array 之遍历数组的一些方法和方法对比</title>
      <link href="/archives/c18c9db4.html"/>
      <url>/archives/c18c9db4.html</url>
      
        <content type="html"><![CDATA[<h2 id="遍历数组的方法对比"><a href="#遍历数组的方法对比" class="headerlink" title="遍历数组的方法对比"></a>遍历数组的方法对比<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8">😃</span></h2><table><thead><tr><th align="center">方法</th><th align="center">简洁程度</th><th align="center">对break/continue的支持</th><th>备注</th></tr></thead><tbody><tr><td align="center"><a href="#1-for">for</a></td><td align="center">低</td><td align="center"><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2714.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2714.png?v8">✔</span></td><td>用于遍历数组，遍历过程受控，可以通过 break 和 continue 实现对遍历的控制</td></tr><tr><td align="center"><a href="#2-forEach">forEach</a></td><td align="center">高</td><td align="center"><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8">❌</span></td><td>ES5 新增。用于遍历数组，遍历过程不受控，会遍历完所有元素</td></tr><tr><td align="center"><a href="#3-every">every</a></td><td align="center">–</td><td align="center"><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8">❌</span></td><td>ES5 新增。用于遍历数组，遍历过程受控，通过设置函数<code>返回值</code>的真假，实现和 break、continue 相同的效果</td></tr><tr><td align="center"><a href="#4-for-in">for in</a></td><td align="center">–</td><td align="center"><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2714.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2714.png?v8">✔</span></td><td>ES3 中就存在了。为 object 设计的，数组属于 object，也能用，但有瑕疵。遍历出的元素的索引是 string 类型的，而不是 number 类型。for in 会把自定义属性也遍历出来。</td></tr><tr><td align="center"><a href="#5-for-of">for of</a></td><td align="center">–</td><td align="center"></td><td>ES6 新增。用于遍历自定义的数据结构（该自定义的数据结构不是数组，也不是 object），同时也可以遍历数组。通过修改默认的遍历机制，配合 for of 的使用，使得 for of 的功能非常强大。</td></tr></tbody></table><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><h3 id="1-for"><a href="#1-for" class="headerlink" title="1. for"></a>1. for</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 结果：12345*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">break</span> <span class="token comment" spellcheck="true">// for 循环中 break 有效</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 结果：1*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">continue</span> <span class="token comment" spellcheck="true">// for 循环中 continue 有效</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 结果：1345*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-forEach"><a href="#2-forEach" class="headerlink" title="2. forEach"></a>2. forEach</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 结果：12345*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">break</span> <span class="token comment" spellcheck="true">// 报错：Unsyntactic break</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">continue</span> <span class="token comment" spellcheck="true">// 报错：Unsyntactic continue</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相比于 for，forEach 的写法更加简洁，但是它不支持 break 和 continue，它所遍历的是从头到尾的每个元素。</p><p>拓展：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 声明一个长度为 5 的数组 array</span><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 给数组的所有元素赋值为 1</span>array<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>  item <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 结果：(5) [empty × 5]*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可见，forEach 不能给数组元素赋值。</p><h3 id="3-every"><a href="#3-every" class="headerlink" title="3. every"></a>3. every</h3><p>特性：every 遍历数组时，是否继续往下遍历，取决于函数的返回值，返回值为 true 时继续遍历，返回值为 false 时结束遍历，默认的返回值为 false。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 函数返回值默认为 false，因此遍历出第一个元素后就结束遍历</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 结果：1*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// 函数返回值为 true，表示继续遍历</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 结果：12345*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码块中函数返回 true 时，every 也能遍历所有元素了，看上去和 forEach 的行为一样。你可能会问，既然在这个时候 every 和 forEach 的行为很像了，那为什么还要新增 every 这个 API 呢？因为我们上面说过，forEach 有弊端，forEach 是不受控的，如果你用 forEach，它必须从头遍历到尾，它不支持 break 和 continue，而 every 虽然也不支持 break 和 continue，但 every 中可以实现和 break、continue 相同的效果，如何实现呢？其实，every 能不能向下遍历取决于函数的返回值，想要达到<code>break</code>的效果，可以使用<code>return false</code>，想要达到<code>continue</code>的效果，可以使用<code>return true</code>，所以说 every 是受控的。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">// 结束函数的执行，不再继续遍历，相当于实现了 break 的效果</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 结果：1*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 不做处理，相当于实现了 continue 的效果</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 结果：1345*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-for-in"><a href="#4-for-in" class="headerlink" title="4. for in"></a>4. for in</h3><p>for in 是为可遍历的 object 做遍历的，而不是为数组，只是数组也属于 object，并且数组是可遍历的，所以也能用 for in 遍历，但是用 for in 遍历数组会有瑕疵。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> index <span class="token keyword">in</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 结果：0 11 22 33 44 5*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span>pro <span class="token operator">=</span> <span class="token number">8</span> <span class="token comment" spellcheck="true">// 为 arr 数组添加属性 pro（arr 是数组，数组是对象，对象上可以挂属性）</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> index <span class="token keyword">in</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 结果：0 11 22 33 44 5pro 8*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可见，数组的索引不一定是数字，也可以是字符串。用 for in 遍历数组，如果数组上挂载了属性，也会被遍历出来，导致和我们的预期不同，这就是用 for in 遍历数组的瑕疵。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span>pro <span class="token operator">=</span> <span class="token number">8</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> index <span class="token keyword">in</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 使用for in遍历，元素的索引是 string 类型的，而不是 number 类型。即这里的 index 是字符串类型</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 左边 index 是 string 类型，右边 2 是 number 类型（注意：== 只比较值，不比较类型；而 === 既比较类型，也比较值，只要类型不同就返回 false）</span>    <span class="token keyword">break</span> <span class="token comment" spellcheck="true">// for in 中支持 break</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 结果：0 11 2*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span>pro <span class="token operator">=</span> <span class="token number">8</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> index <span class="token keyword">in</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 使用for in遍历，元素的索引是 string 类型的，而不是 number 类型。即这里的 index 是字符串类型</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 左边 index 是 string 类型，右边 2 是 number 类型（注意：== 只比较值，不比较类型；而 === 既比较类型，也比较值，只要类型不同就返回 false）</span>    <span class="token keyword">continue</span> <span class="token comment" spellcheck="true">// for in 中支持 continue</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 结果：0 11 23 44 5pro 8*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的 if 条件判断中，如果想使用<code>===</code>，可以将<code>index == 2</code>换成<code>index * 1 === 2</code>或者<code>+index === 2</code>或者<code>index === '2'</code></p><p>字符串中只有数字时，可以通过乘 1 或在字符串前加个加号将字符串转换为 number 类型：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> test <span class="token operator">=</span> <span class="token string">'00023'</span> <span class="token comment" spellcheck="true">// 字符串中只有数字</span><span class="token keyword">var</span> test1 <span class="token operator">=</span> test <span class="token operator">*</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">// 乘以 1 转换成 number 类型</span><span class="token keyword">var</span> test2 <span class="token operator">=</span> <span class="token operator">+</span>test <span class="token comment" spellcheck="true">// 前面加个加号转换成 number 类型</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> <span class="token keyword">typeof</span> <span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 00023 string</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test1<span class="token punctuation">,</span> <span class="token keyword">typeof</span> <span class="token punctuation">(</span>test1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 23 "number"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test2<span class="token punctuation">,</span> <span class="token keyword">typeof</span> <span class="token punctuation">(</span>test2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 23 "number"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-for-of"><a href="#5-for-of" class="headerlink" title="5. for of"></a>5. for of</h3><p>for of 用于遍历自定义的数据结构（该自定义的数据结构不是数组，也不是 object），同时也可以遍历数组。</p><h4 id="5-1-遍历数组"><a href="#5-1-遍历数组" class="headerlink" title="5.1 遍历数组"></a>5.1 遍历数组</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 结果：12345*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-2-遍历自定义的数据结构"><a href="#5-2-遍历自定义的数据结构" class="headerlink" title="5.2 遍历自定义的数据结构"></a>5.2 遍历自定义的数据结构</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 假设有 A、B、C 三类商品，每类商品下有不同价格的商品，现就价格进行如下定义：</span><span class="token keyword">const</span> Price <span class="token operator">=</span> <span class="token punctuation">{</span>  A<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2.3</span><span class="token punctuation">,</span> <span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token number">4.5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  B<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  C<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0.8</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1.2</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果想要找出每类商品中的最低价，该怎么实现呢？</p><p>我们先用<code>for in</code>遍历</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> Price<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> Price<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 结果：A (3) [2.3, 1.5, 4.5]B (2) [3, 5]C (3) [0.8, 0.5, 1.2]*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果想要<code>直接</code>遍历出各类商品中的最低价，<code>for in</code>无法实现，需要再做排序等其它操作。</p><p>我们再用<code>for of</code>遍历</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// to do</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 下添加 tree 到 Git Bash 中</title>
      <link href="/archives/9f75cef.html"/>
      <url>/archives/9f75cef.html</url>
      
        <content type="html"><![CDATA[<h2 id="Windows-下添加-tree-到-Git-Bash-中"><a href="#Windows-下添加-tree-到-Git-Bash-中" class="headerlink" title="Windows 下添加 tree 到 Git Bash 中"></a>Windows 下添加 tree 到 Git Bash 中</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p><strong>操作系统：</strong><code>Windows 10 专业版 1909 (18363.778)</code></p><p><strong>Git 版本：</strong><code>2.26.1.windows.1</code></p><p>在 Git Bash 里面输入命令 <code>tree</code>，出现提示：<code>bash: /usr/bin/tree: No such file or directory</code>， 截图如下：</p><!--<img src="/archives/9f75cef/image-20200510111719970.png" class="" title="提示信息截图">--><p><img src="https://myimagebed-1302088591.cos.ap-nanjing.myqcloud.com/2020-05-10-Windows-%E4%B8%8B%E6%B7%BB%E5%8A%A0-tree-%E5%88%B0-Git-Bash-%E4%B8%AD/image-20200510111719970.png" alt="提示信息截图"></p><h3 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h3><p>提示信息告诉我们，没有 <code>/usr/bin/tree</code> 这样的文件或目录。</p><p>那么 <code>/usr/bin</code> 目录在哪呢？</p><p>Windows 上 Git Bash 中默认的 <code>/usr/bin</code> 目录位于 <code>C:\Program Files\Git</code> 目录下。</p><p>打开文件资源管理器，进入该目录后查找 <code>tree</code>，确实没找到，截图如下：</p><!--<img src="/archives/9f75cef/image-20200510121001838.png" class="" title="bin 目录">--><p><img src="https://myimagebed-1302088591.cos.ap-nanjing.myqcloud.com/2020-05-10-Windows-%E4%B8%8B%E6%B7%BB%E5%8A%A0-tree-%E5%88%B0-Git-Bash-%E4%B8%AD/image-20200510121001838.png" alt="目录"></p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>所以我们需要下载 <code>tree</code>，然后把它添加到 <code>/usr/bin</code> 下。</p><p><a href="http://gnuwin32.sourceforge.net/packages/tree.htm" target="_blank" rel="noopener">官网下载 tree</a> 请下载 <code>Binaries</code> 版本</p><!--<img src="/archives/9f75cef/image-20200510122041437.png" class="" title="官网截图">--><p><img src="https://myimagebed-1302088591.cos.ap-nanjing.myqcloud.com/2020-05-10-Windows-%E4%B8%8B%E6%B7%BB%E5%8A%A0-tree-%E5%88%B0-Git-Bash-%E4%B8%AD/image-20200510122041437.png" alt="官网截图"></p><p>但是可能会遇到网站打不开的情况，这里提供百度云网盘下载方式：</p><p><a href="https://pan.baidu.com/s/1jI-lIh9yqPqrXWoE6sfiew" target="_blank" rel="noopener">网盘下载 tree</a> 提取码：bp3u </p><p>将下载下来的 <code>tree-1.5.2.2-bin.zip</code> 解压后，只需把里面 <code>bin</code> 目录下的 <code>tree.exe</code> 文件复制粘贴到 Git 默认的安装目录 <code>C:\Program Files\Git</code> 下的 <code>usr\bin</code> 目录下，如下图所示：</p><!--<img src="/archives/9f75cef/image-20200510124629332.png" class="" title="粘贴后的目录">--><p><img src="https://myimagebed-1302088591.cos.ap-nanjing.myqcloud.com/2020-05-10-Windows-%E4%B8%8B%E6%B7%BB%E5%8A%A0-tree-%E5%88%B0-Git-Bash-%E4%B8%AD/image-20200510124629332.png" alt="粘贴后的目录"></p><p>好了，下面我们再用命令 <code>tree</code> 试试呢？</p><!--<img src="/archives/9f75cef/image-20200510130854153.png" class="" title="tree 命令成功执行">--><p><img src="https://myimagebed-1302088591.cos.ap-nanjing.myqcloud.com/2020-05-10-Windows-%E4%B8%8B%E6%B7%BB%E5%8A%A0-tree-%E5%88%B0-Git-Bash-%E4%B8%AD/image-20200510130854153.png" alt="命令成功执行"></p><p>成功啦！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> Git Bash </tag>
            
            <tag> tree </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
